version: '3.9'

services:
  vault:
    image: hashicorp/vault:1.15
    container_name: vault-prod
    ports:
      - "8200:8200"
    env_file:
      - ./vault/vault.env
    environment:
      - VAULT_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_CLUSTER_ADDR=http://0.0.0.0:8201
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault/config:/vault/config:ro
      - ./vault/scripts:/vault/scripts:ro
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    command: vault server -config=/vault/config/vault.json
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - vault-network
      - backend-network

  postgres:
    image: postgres:15
    container_name: postgres-prod
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - backend-network

  backend:
    image: ghcr.io/Wordite/coin/backend:latest
    container_name: backend-prod
    ports:
      - "3000:3000"
    env_file:
      - ./backend/.env.production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mydb}?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
    volumes:
      - backend_uploads:/app/uploads
      - ./docs/content:/app/docs-content:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    restart: unless-stopped
    command: sh -c "npx prisma migrate deploy && npm run start:prod"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend-network

  admin:
    image: ghcr.io/Wordite/coin/admin:latest
    container_name: admin-prod
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${ADMIN_API_URL:-http://localhost:3000/api}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - frontend-network

  frontend:
    image: ghcr.io/Wordite/coin/frontend:latest
    container_name: frontend-prod
    ports:
      - "3002:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${FRONTEND_API_URL:-http://localhost:3000/api}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - frontend-network

  docs:
    image: ghcr.io/Wordite/coin/docs:latest
    container_name: docs-prod
    ports:
      - "5175:80"
    environment:
      - NODE_ENV=production
      - VITE_BACKEND_URL=${DOCS_API_URL:-http://localhost:3000/api}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - frontend-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  backend-network:
    driver: bridge
  vault-network:
    driver: bridge
  frontend-network:
    driver: bridge
