name: coin

services:
  postgres:
    image: postgres:15
    container_name: postgres_dev
    ports:
      - "5432:5432"
    env_file:
      - ./postgres/.env.dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_dev
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 500mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  vault:
    image: hashicorp/vault:1.15
    container_name: vault_dev
    ports:
      - "8200:8200"
    env_file:
      - ./vault/.env.dev
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    command: vault server -dev -dev-root-token-id=dev-root-token -dev-listen-address=0.0.0.0:8200
    healthcheck:
      test: ["CMD", "sh", "-c", "VAULT_ADDR=http://127.0.0.1:8200 vault status >/dev/null 2>&1"]
      interval: 2s
      timeout: 2s
      retries: 20

  vault_init_dev:
    image: hashicorp/vault:1.15
    container_name: vault_init_dev
    depends_on:
      vault:
        condition: service_healthy
    entrypoint: ["/bin/sh","-c"]
    command: >
      "
      set -ex;
      export VAULT_ADDR=http://vault:8200;
      export VAULT_TOKEN=dev-root-token;
      echo 'Waiting for Vault dev status...';
      for i in $(seq 1 60); do
        vault status >/dev/null 2>&1 && break || true;
        sleep 1;
      done;
      echo 'Enabling solana kv (v2) at path=solana with retries...';
      for i in $(seq 1 10); do
        vault secrets enable -path=solana -version=2 kv && break || true;
        sleep 1;
      done;
      echo 'Verifying by writing a test key...';
      vault kv put solana/root-wallet init_check=ok || true;
      echo 'Listing secrets:';
      vault secrets list || true;
      echo 'Vault dev initialization complete.';
      "
    restart: "no"

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile.dev
    container_name: docs_dev
    ports:
      - "5175:5175"
    volumes:
      - ./docs/app:/app/app
      - ./docs/content:/app/content
      - ./docs/public:/app/public
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend_dev
    ports:
      - "3000:3000"
    environment:
      - DOCKER=true
      - NODE_ENV=development
    env_file:
      - ./backend/.env.dev
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - backend_uploads:/app/uploads
      - ./docs/content:/app/docs-content
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
      vault_init_dev:
        condition: service_completed_successfully
      docs:
        condition: service_started
    restart: unless-stopped

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.dev
    container_name: admin_dev
    env_file:
      - ./admin/.env.dev
    ports:
      - "5173:5173"
    volumes:
      - ./admin/src:/app/src
      - ./admin/public:/app/public
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend_dev
    env_file:
      - ./frontend/.env.dev
    ports:
      - "5174:5174"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: unless-stopped

volumes:
  postgres_data:
    name: coin_postgres_data
  backend_uploads:
    name: coin_backend_uploads
  vault_data:
    name: coin_vault_data

