name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # BUILD AND TEST
  # ===========================================
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # Backend tests
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend tests
      working-directory: ./backend
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key
        VAULT_URL: http://localhost:8200
        VAULT_TOKEN: test-token

    # Frontend tests
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # Admin tests
    - name: Install admin dependencies
      working-directory: ./admin
      run: npm ci

    - name: Build admin
      working-directory: ./admin
      run: npm run build

    # Docs tests
    - name: Install docs dependencies
      working-directory: ./docs
      run: npm ci

    - name: Run docs tests
      working-directory: ./docs
      run: npm run test

  # ===========================================
  # BUILD DOCKER IMAGES
  # ===========================================
  build-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Build Backend
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    # Build Admin (Static)
    - name: Build and push admin static image
      uses: docker/build-push-action@v5
      with:
        context: ./admin
        file: ./admin/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    # Build Frontend (Static)
    - name: Build and push frontend static image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    # Build Docs
    - name: Build and push docs image
      uses: docker/build-push-action@v5
      with:
        context: ./docs
        file: ./docs/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/docs:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  # ===========================================
  # DEPLOY TO PRODUCTION
  # ===========================================
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to project directory
          cd ${{ secrets.PROJECT_PATH }}
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/docs:${{ github.sha }}
          
          # Update docker-compose.prod.yml with new image tags
          sed -i "s|image: backend|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}|g" docker-compose.prod.yml
          sed -i "s|image: admin|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}|g" docker-compose.prod.yml
          sed -i "s|image: frontend|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" docker-compose.prod.yml
          sed -i "s|image: docs|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/docs:${{ github.sha }}|g" docker-compose.prod.yml
          
          # Deploy
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
          
          # Extract static files from containers
          mkdir -p /var/www/coin/admin/dist /var/www/coin/frontend/dist /var/www/coin/docs/dist
          docker cp admin-prod:/usr/share/nginx/html/. /var/www/coin/admin/dist/
          docker cp frontend-prod:/usr/share/nginx/html/. /var/www/coin/frontend/dist/
          docker cp docs-prod:/usr/share/nginx/html/. /var/www/coin/docs/dist/
          
          # Set proper permissions
          chown -R www-data:www-data /var/www/coin/
          chmod -R 755 /var/www/coin/
          
          # Reload nginx
          nginx -t && systemctl reload nginx
          
          # Cleanup old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/health || exit 1
          echo "Deployment successful!"

  # ===========================================
  # NOTIFICATION
  # ===========================================
  notify:
    needs: [build-and-test, build-images, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üöÄ Application is live at: ${{ secrets.APP_URL }}"

    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîç Check the logs for details"
