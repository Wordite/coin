name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # BUILD AND TEST
  # ===========================================
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # Backend tests
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend tests
      working-directory: ./backend
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key
        VAULT_URL: http://localhost:8200
        VAULT_TOKEN: test-token

    # Frontend tests
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # Admin tests
    - name: Install admin dependencies
      working-directory: ./admin
      run: npm ci

    - name: Build admin
      working-directory: ./admin
      run: npm run build

    # Docs tests
    - name: Install docs dependencies
      working-directory: ./docs
      run: npm ci

    - name: Run docs tests
      working-directory: ./docs
      run: npm run test

  
  # ===========================================
  # DEPLOY TO PRODUCTION (via SSH, build on server)
  # ===========================================
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          set -e
          cd ${{ secrets.PROJECT_PATH }}
          
          # Ensure project exists; clone if missing
          if [ ! -d .git ]; then
            git clone ${{ github.server_url }}/${{ github.repository }} .
          fi
          git fetch --all --prune
          git reset --hard origin/main
          
          # Optional: provide env for build args
          export VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL || '/api' }}
          
          # Build and start stack
          docker compose pull || true
          docker compose build --no-cache backend frontend admin docs
          docker compose up -d --remove-orphans
          
          # Sync static builds for gateway (frontend/admin/docs)
          mkdir -p ./frontend/dist ./admin/dist ./docs/dist
          docker cp frontend:/usr/share/nginx/html/. ./frontend/dist/ || true
          docker cp admin:/usr/share/nginx/html/. ./admin/dist/ || true
          # Docs client build is inside /app/build/client in docs container
          docker cp docs:/app/build/client/. ./docs/dist/ || true
          
          # Reload gateway
          docker compose restart nginx
          
          # Health checks
          curl -fsS http://localhost/ >/dev/null
          curl -fsS http://localhost/api/health || curl -fsS http://localhost/health


  # ===========================================
  # NOTIFICATION
  # ===========================================
  notify:
    needs: [build-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "🚀 Application is live at: ${{ secrets.APP_URL }}"

    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "🔍 Check the logs for details"
