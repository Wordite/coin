version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html/frontend:ro
      - ./admin/dist:/usr/share/nginx/html/admin:ro
      - ./docs/dist:/usr/share/nginx/html/docs:ro
      - ./certbot/www:/var/www/certbot:rw
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
      - frontend
      - admin
      - docs
    restart: unless-stopped

  vault:
    image: hashicorp/vault:1.15
    container_name: vault
    ports:
      - '8200:8200'
    env_file:
      - ./vault/.env.prod
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
      - ./vault/certs:/vault/certs:ro
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    command: vault server -config=/vault/config/vault.json

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - '5432:5432'
    env_file:
      - ./postgres/.env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    command: redis-server --maxmemory 500mb --maxmemory-policy allkeys-lru --replicaof no one
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - '3000:3000'
    env_file:
      - ./backend/.env.prod
    environment:
      - NODE_OPTIONS=--dns-result-order=ipv4first
      - MX_CHECK_DNS_SERVERS=8.8.8.8,1.1.1.1
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
      - DOCS_DIR=/home/coin/docs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    volumes:
      - backend_uploads:/app/uploads
      - ./docs/content:/app/docs-content
      - ./docs:/home/coin/docs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./scripts/rebuild-docs.sh:/app/scripts/rebuild-docs.sh:rw
      - /home/coin/backups:/home/coin/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    restart: unless-stopped

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: admin
    ports:
      - '5173:80'
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    container_name: frontend
    ports:
      - '5174:80'
    restart: unless-stopped

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL}
        - NODE_ENV=production
    container_name: docs
    ports:
      - '5175:3000'
    environment:
      - NODE_ENV=production
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
      - PORT=3000
    volumes:
      - ./docs/content:/app/content
    restart: unless-stopped

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    name: coin_postgres_data
  backend_uploads:
    name: coin_backend_uploads
  vault_data:
    name: coin_vault_data
