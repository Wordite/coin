name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e
            cd ${{ secrets.PROJECT_PATH }}
            
            echo "📥 Pulling latest changes..."
            git fetch --all
            git reset --hard origin/main
            
            echo "📝 Creating .env files from secrets..."
            cat > backend/.env.prod << 'BACKEND_ENV_EOF'
            ${{ secrets.BACKEND_ENV_PROD }}
            BACKEND_ENV_EOF
            
            cat > postgres/.env.prod << 'POSTGRES_ENV_EOF'
            ${{ secrets.POSTGRES_ENV_PROD }}
            POSTGRES_ENV_EOF
            
            cat > vault/.env.prod << 'VAULT_ENV_EOF'
            ${{ secrets.VAULT_ENV_PROD }}
            VAULT_ENV_EOF
            
            cat > .env.prod << 'ROOT_ENV_EOF'
            ${{ secrets.ROOT_ENV_PROD }}
            ROOT_ENV_EOF
            
            echo "🧹 Cleaning up old containers..."
            docker compose -f docker-compose.yml --env-file .env.prod down --remove-orphans || true
            docker network prune -f || true
            
            echo "🔐 Ensuring inter-container networking rules..."
            sudo iptables -C FORWARD -s 172.20.0.0/16 -d 172.20.0.0/16 -j ACCEPT 2>/dev/null || sudo iptables -I FORWARD -s 172.20.0.0/16 -d 172.20.0.0/16 -j ACCEPT
            sudo iptables -C DOCKER-USER -s 172.20.0.0/16 -d 172.20.0.0/16 -j ACCEPT 2>/dev/null || sudo iptables -I DOCKER-USER -s 172.20.0.0/16 -d 172.20.0.0/16 -j ACCEPT

            echo "🐳 Building and starting services..."
            docker compose -f docker-compose.yml --env-file .env.prod up -d --build
            
            echo "⏳ Waiting for services to start..."
            sleep 8
            echo "🩺 Waiting for Postgres readiness..."
            docker run --rm --network $(docker network ls --format '{{.Name}}' | grep _default) postgres:15 bash -lc 'for i in {1..30}; do pg_isready -h postgres -p 5432 -U postgres && exit 0; sleep 2; done; exit 1'
            echo "🩺 Waiting for Redis readiness..."
            docker run --rm --network $(docker network ls --format '{{.Name}}' | grep _default) redis:7-alpine sh -c 'for i in $(seq 1 30); do redis-cli -h redis ping >/dev/null 2>&1 && exit 0; sleep 2; done; exit 1'
            
            echo "🔓 Unsealing Vault..."
            docker exec vault vault operator unseal -address=http://127.0.0.1:8201 ${{ secrets.VAULT_UNSEAL_KEY_1 }}
            docker exec vault vault operator unseal -address=http://127.0.0.1:8201 ${{ secrets.VAULT_UNSEAL_KEY_2 }}
            docker exec vault vault operator unseal -address=http://127.0.0.1:8201 ${{ secrets.VAULT_UNSEAL_KEY_3 }}
            
            echo "🔧 Setting up Vault secrets engines..."
            docker exec vault vault login -address=http://127.0.0.1:8201 ${{ secrets.VAULT_ROOT_TOKEN }}
            docker exec vault vault secrets enable -address=http://127.0.0.1:8201 -path=solana kv-v2 || echo "Solana engine already exists"
            
            echo "🔧 Fixing file permissions..."
            sudo chown -R 1001:65533 ./docs/content || echo "Permission fix completed"
            chmod +x ./scripts/rebuild-docs.sh || echo "Script permissions set"
            
            echo "🔧 Setting script permissions in container..."
            docker exec backend chmod +x /app/scripts/rebuild-docs.sh || echo "Script permissions set in container"
            
            echo "🔧 Setting Docker socket permissions..."
            sudo chmod 666 /var/run/docker.sock || echo "Docker socket permissions set"
            
            echo "🔧 Setting Docker group permissions..."
            # Get the docker group GID from the container
            DOCKER_GID=$(docker exec backend getent group docker | cut -d: -f3) || echo "1002"
            sudo chown :$DOCKER_GID /var/run/docker.sock || echo "Docker group permissions set"
            
            echo "✅ Deployment complete!"
            docker compose ps
